# BLOCKS

1, What are closures? How does Ruby implement them?

A closure is a piece or chunk of code that can be saved and passed around to existing methods and executed at a later time i.e. later than when it is defined.

A closure can also be thought of as an unnamed method that can be passed to other methods and executed at a later time.

Ruby implements closures through blocks, lambdas and procs.

Example:

`[1,2,3].each {|num| puts num}` 

In the above code, the chunk of code within the `{}` is a closure that is being passed to the `each` method invocation. Another way to create blocks is to use the `do..end` syntax.

```ruby
[1,2,3].each do |num|
  puts num
end
```

Closures can also be created using `proc` objects or `lambdas`.

A `proc` object is created as shown below:

`proc = Proc.new {|ele| "hello"}`

2, What is binding?

Binding is the relationship that a closure has with variables, methods and constants in its surrounding scope when it was defined.
A closure builds a kind of an enclosure around the variables, methods and constants in its surrounding scope and carries it around wherever it is passed to. 

This is known as the closure's binding; the set of variables. methods and constants that were in scope when the closure was created. It retains references to variables, methods and constant names in its surrounding scope. This allows the closure to reference these artifacts when it is later executed even if the closure is called in a scope where these variables or methods would normally be out of scope. This is because of a closure's binding.

For example:

```ruby
def a_method
  yield
end
str = "Hello"

a_method { str = "Bye"}

puts str # Bye
```

In the above code, the block ` { str = "Bye"}` is being executed inside the method `a_method` when `yield` is invoked and `str` is not in scope inside this method. But when we see the output on line XX, we can see that `str` has been reassigned to `"Bye"`. This is because blocks retain memory of variables that are initialized before the block is created. That is why they can referene these variables and even reassign them.

3, How does binding affect the scope of closures?

As a closure retains references to names of variables and methods in its surrounding context where it is defined (not where it is invoked), it can refer to these variables or even reassign them even if the block is being executed in a scope where those variables would normally be out of scope. This allows a closure to access variables, methods and constants not based on where it is called but based on where it was defined.

For example:

```ruby
def a_method
  yield
end
str = "Hello"

a_method { str = "Bye"}

puts str # Bye
```

In the above code, the block ` { str = "Bye"}` is being executed inside the method `a_method` when `yield` is invoked and `str` is not in scope inside this method. But when we see the output on line XX, we can see that `str` has been reassigned to `"Bye"`. This is because blocks retain memory of variables that are initialized before the block is created. That is why they can referene these variables and even reassign them.

4, How do blocks work?

Block are a type of closure that are created using the `{}` or `do..end` syntax. They are an unnamed chunks of code that can be passed to method invocations. The methods can then yield to these passed in blocks at which time the code within the blocks is executed. Blocks return the evaluated result of the last expression evaluated in the block i.e. object returned by the last line of code.

5, When do we use blocks? (List the two reasons)

Blocks are used when we want to delay or delegate some portion of a method implementation to method invocation time (to the method user). They can also be used when a method needs to do some before and after actions but the before and after what (sandwiched code) is delegated to the method user who specifies is during method invocation.

6, Describe the two reasons we use blocks, use examples.

- Delay some method implementation details to the method invocation time:

For example the `Array#each` method:

```ruby
[1,2,3].each {|num| puts num}
```

In the above code, the `each` method is used to iterate over the elements in the array `[1,2,3]`, but what happens during each iteration is not defined within the implementation of the `each` method. This is left upto the method user to define when the method is invoked by passing in a chunk of code. This chunk of code the `{|num| puts num}` block defines that each element will be output to the console. So the implementor of the `each` method defines it in a generic way and leaves it upto to the method user to decide what to do with each element on each iteration.

- When the method needs to do some before and after actions (sandwich code)

```ruby
def transform(str)
  before = str.dup

  after = yield(str)

  {before => after}
end

p transform("Hello World") {|string| string.capitalize}

```

In the above code we have defined a method `transform` that returns a hash with the key as the string before transformation and value as the string after transformation but the transformation mechanism is not defined. The methods only responsibility is to store the initial value of the string (incase it is mutated) and return a hash storing the initial value and the final value after transformation.

7, When can you pass a block to a method? Why?

8, How do we make a block argument manditory?

9, How do methods access both implicit and explicit blocks passed in?

10, What is `yield` in Ruby and how does it work?

11, How do we check if a block is passed into a method?

12, Why is it important to know that methods and blocks can return closures?

13, What are the benifits of explicit blocks?

14, Describe the arity differences of blocks, procs, methods and lambdas.

15, What other differences are there between lambdas and procs? (might not be assessed on this, but good to know)

16, What does `&` do when in a the method parameter?

```ruby
def method(&var); end
```

17, What does `&` do when in a method invocation argument?

```ruby
method(&var)
```

18, What is happening in the code below?

```ruby
arr = [1, 2, 3, 4, 5]

p arr.map(&:to_s) # specifically `&:to_s`
```

19, How do we get the desired output without altering the method or the method invocations?

```ruby
def call_this
  yield(2)
end

# your code here

p call_this(&to_s) # => returns 2
p call_this(&to_i) # => returns "2"
```

20, How do we invoke an explicit block passed into a method using `&`? Provide example.

21, What concept does the following code demonstrate?

```ruby
def time_it
  time_before = Time.now
  yield
  time_after= Time.now
  puts "It took #{time_after - time_before} seconds."
end
```

22, What will be outputted from the method invocation `block_method('turtle')` below? Why does/doesn't it raise an error?

```ruby
def block_method(animal)
  yield(animal)
end

block_method('turtle') do |turtle, seal|
  puts "This is a #{turtle} and a #{seal}."
end
```

23, What will be outputted if we add the follow code to the code above? Why?

```ruby
block_method('turtle') { puts "This is a #{animal}."}
```

24, What will the method call `call_me` output? Why?

```ruby
def call_me(some_code)
  some_code.call
end

name = "Robert"
chunk_of_code = Proc.new {puts "hi #{name}"}
name = "Griffin"

call_me(chunk_of_code)
```

25, What happens when we change the code as such:

```ruby
def call_me(some_code)
  some_code.call
end

chunk_of_code = Proc.new {puts "hi #{name}"}
name = "Griffin"

call_me(chunk_of_code)
```

26, What will the method call `call_me` output? Why?

```ruby
def call_me(some_code)
  some_code.call
end

name = "Robert"

def name
  "Joe"
end

chunk_of_code = Proc.new {puts "hi #{name}"}

call_me(chunk_of_code)
```

27, Why does the following raise an error?

```ruby
def a_method(pro)
  pro.call
end

a = 'friend'
a_method(&a)
```

28, Why does the following code raise an error?

```ruby
def some_method(block)
  block_given?
end

bl = { puts "hi" }

p some_method(bl)
```

29, Why does the following code output `false`?

```ruby
def some_method(block)
  block_given?
end

bloc = proc { puts "hi" }

p some_method(bloc)
```

30, How do we fix the following code so the output is `true`? Explain

```ruby
def some_method(block)
  block_given? # we want this to return `true`
end

bloc = proc { puts "hi" } # do not alter this code

p some_method(bloc)
```

31, How does `Kernel#block_given?` work?

32, Why do we get a `LocalJumpError` when executing the below code? &
How do we fix it so the output is `hi`? (2 possible ways)

```ruby
def some(block)
  yield
end

bloc = proc { p "hi" } # do not alter

some(bloc)
```

33, What does the following code tell us about lambda's? (probably not assessed on this but good to know)

```ruby
bloc = lambda { p "hi" }

bloc.class # => Proc
bloc.lambda? # => true

new_lam = Lambda.new { p "hi, lambda!" } # => NameError: uninitialized constant Lambda
```

34, What does the following code tell us about explicitly returning from proc's and lambda's? (once again probably not assessed on this, but good to know ;)

```ruby
def lambda_return
  puts "Before lambda call."
  lambda {return}.call
  puts "After lambda call."
end

def proc_return
  puts "Before proc call."
  proc {return}.call
  puts "After proc call."
end

lambda_return #=> "Before lambda call."
              #=> "After lambda call."

proc_return #=> "Before proc call."

```

35, What will `#p` output below? Why is this the case and what is this code demonstrating?

```ruby
def retained_array
  arr = []
  Proc.new do |el|
    arr << el
    arr
  end
end

arr = retained_array
arr.call('one')
arr.call('two')
p arr.call('three')
```

# TESTING WITH MINITEST

36, What is a test suite?

37, What is a test?

38, What is an assertion?

39, What do testing framworks provide?

40, What are the differences of Minitest vs RSpec

41, What is Domain Specific Language (DSL)?

42, What is the difference of assertion vs refutation methods?

43, How does assert_equal compare its arguments?

44, What is the SEAT approach and what are its benefits?

45, When does setup and tear down happen when testing?

46, What is code coverage?

47, What is regression testing?

# CORE TOOLS

48, What are the purposes of core tools?

49, What are RubyGems and why are they useful?

50, What are Version Managers and why are they useful?

51, What is Bundler and why is it useful?

52, What is Rake and why is it useful?

53, What constitues a Ruby project?