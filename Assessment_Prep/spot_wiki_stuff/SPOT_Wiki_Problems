# BLOCKS

1, What are closures? How does Ruby implement them?

Closures are a 'piece' or 'chunck' of code that can be saved, passed around to other methods and executed later.

They are called closures because they build a connection with all their surrounding artifacts like variable names and method names and they carry this connection around with them where ever they are passed to so these variables or methods can be referenced when the closure is later executed. This connection is known as the closures binding.

Closures are like unnamed methods that can be passed around to other methods and executed later.

Ruby implements closures through blocks, Procs and Lamdas. 

Example of blocks:

```ruby
[1,2,3].each { |value| puts value }
```

In the above example the `{ |value| puts value }` is block being passed to the `each` method invocation.
Blocks can also be created using the `do..end` syntax for example:

```ruby
[1,2,3].each do |value| 
  puts value
end
```
Procs are objects that are actually closures i.e. a chunck of code wrapped as an object. Being an object, it can be assigned to variables and passed around to methods like any other variable. These can be executed as many times as needed.

A `proc` object is created as shown below:

`proc = Proc.new {|ele| "hello"}`

2, What is binding?

When a closure is defined, it builds a sort of a connection with variables and methods in its surrounding scope where it is defined. So, later whenever or wherever the closure is being executed, it is able to access these variables and method.

This connection that the closure has with its surrounding artifacts is know as its binding. A closures binding is the set of its surrounding artifacts i.e. variable names and method names which are in scope where the closure is created and that it keeps a reference to when being passed around. So it can access these variables/methods later whenever or wherever it is executed.

For example in the code below, `SOME_CONSTANT`, `some_method` and `some_variable` are all part of the binding of the block passed to the `each` method invocation on lines `11` to `xx`.

```ruby
SOME_CONSTANT = 10

def some_method

end

some_variable = "Hello World"

[1,2,3,4].each do |num|
  # do something
end
```

3, How does binding affect the scope of closures?

A closures binding allows it to access variables that were in its surrounding when it was defined regardless of where the closure is being executed.

This allows the closure to access variables in a place where the variable would normally be out of scope but due to the variable being part of the closures binding, it is accessible to the closure.

For example:

```ruby
def some_method
  yield
end

some_var = 10

some_method { some_var + 20 }
```

In the above example, we are invoking the block passed to the `some_method` invocation inside the `some_method` where the local variable `some_var` is not accessible. But since, some_var is part of block `{ some_var + 10}` binding, it is accessibel to the block wherever the block is executed, in this case inside the `some_method`.

4, How do blocks work?

Block are a type of closure that are created using the `{}` or `do..end` syntax. They are an unnamed chunks of code that can be passed to method invocations. The methods can then yield to these passed in blocks at which time the code within the blocks is executed. Blocks return the evaluated result of the last expression evaluated in the block i.e. object returned by the last line of code.

5, When do we use blocks? (List the two reasons)



6, Describe the two reasons we use blocks, use examples.


7, When can you pass a block to a method? Why?

8, How do we make a block argument manditory?

9, How do methods access both implicit and explicit blocks passed in?

10, What is `yield` in Ruby and how does it work?

11, How do we check if a block is passed into a method?

12, Why is it important to know that methods and blocks can return closures?

13, What are the benifits of explicit blocks?

14, Describe the arity differences of blocks, procs, methods and lambdas.

15, What other differences are there between lambdas and procs? (might not be assessed on this, but good to know)

16, What does `&` do when in a the method parameter?

```ruby
def method(&var); end
```

17, What does `&` do when in a method invocation argument?

```ruby
method(&var)
```

18, What is happening in the code below?

```ruby
arr = [1, 2, 3, 4, 5]

p arr.map(&:to_s) # specifically `&:to_s`
```

19, How do we get the desired output without altering the method or the method invocations?

```ruby
def call_this
  yield(2)
end

# your code here

p call_this(&to_s) # => returns 2
p call_this(&to_i) # => returns "2"
```

20, How do we invoke an explicit block passed into a method using `&`? Provide example.

21, What concept does the following code demonstrate?

```ruby
def time_it
  time_before = Time.now
  yield
  time_after= Time.now
  puts "It took #{time_after - time_before} seconds."
end
```

22, What will be outputted from the method invocation `block_method('turtle')` below? Why does/doesn't it raise an error?

```ruby
def block_method(animal)
  yield(animal)
end

block_method('turtle') do |turtle, seal|
  puts "This is a #{turtle} and a #{seal}."
end
```

23, What will be outputted if we add the follow code to the code above? Why?

```ruby
block_method('turtle') { puts "This is a #{animal}."}
```

24, What will the method call `call_me` output? Why?

```ruby
def call_me(some_code)
  some_code.call
end

name = "Robert"
chunk_of_code = Proc.new {puts "hi #{name}"}
name = "Griffin"

call_me(chunk_of_code)
```

25, What happens when we change the code as such:

```ruby
def call_me(some_code)
  some_code.call
end

chunk_of_code = Proc.new {puts "hi #{name}"}
name = "Griffin"

call_me(chunk_of_code)
```

26, What will the method call `call_me` output? Why?

```ruby
def call_me(some_code)
  some_code.call
end

name = "Robert"

def name
  "Joe"
end

chunk_of_code = Proc.new {puts "hi #{name}"}

call_me(chunk_of_code)
```

27, Why does the following raise an error?

```ruby
def a_method(pro)
  pro.call
end

a = 'friend'
a_method(&a)
```

28, Why does the following code raise an error?

```ruby
def some_method(block)
  block_given?
end

bl = { puts "hi" }

p some_method(bl)
```

29, Why does the following code output `false`?

```ruby
def some_method(block)
  block_given?
end

bloc = proc { puts "hi" }

p some_method(bloc)
```

30, How do we fix the following code so the output is `true`? Explain

```ruby
def some_method(block)
  block_given? # we want this to return `true`
end

bloc = proc { puts "hi" } # do not alter this code

p some_method(bloc)
```

31, How does `Kernel#block_given?` work?

32, Why do we get a `LocalJumpError` when executing the below code? &
How do we fix it so the output is `hi`? (2 possible ways)

```ruby
def some(block)
  yield
end

bloc = proc { p "hi" } # do not alter

some(bloc)
```

33, What does the following code tell us about lambda's? (probably not assessed on this but good to know)

```ruby
bloc = lambda { p "hi" }

bloc.class # => Proc
bloc.lambda? # => true

new_lam = Lambda.new { p "hi, lambda!" } # => NameError: uninitialized constant Lambda
```

34, What does the following code tell us about explicitly returning from proc's and lambda's? (once again probably not assessed on this, but good to know ;)

```ruby
def lambda_return
  puts "Before lambda call."
  lambda {return}.call
  puts "After lambda call."
end

def proc_return
  puts "Before proc call."
  proc {return}.call
  puts "After proc call."
end

lambda_return #=> "Before lambda call."
              #=> "After lambda call."

proc_return #=> "Before proc call."

```

35, What will `#p` output below? Why is this the case and what is this code demonstrating?

```ruby
def retained_array
  arr = []
  Proc.new do |el|
    arr << el
    arr
  end
end

arr = retained_array
arr.call('one')
arr.call('two')
p arr.call('three')
```

# TESTING WITH MINITEST

36, What is a test suite?

37, What is a test?

38, What is an assertion?

39, What do testing framworks provide?

40, What are the differences of Minitest vs RSpec

41, What is Domain Specific Language (DSL)?

42, What is the difference of assertion vs refutation methods?

43, How does assert_equal compare its arguments?

44, What is the SEAT approach and what are its benefits?

45, When does setup and tear down happen when testing?

46, What is code coverage?

47, What is regression testing?

# CORE TOOLS

48, What are the purposes of core tools?

49, What are RubyGems and why are they useful?

50, What are Version Managers and why are they useful?

51, What is Bundler and why is it useful?

52, What is Rake and why is it useful?

53, What constitues a Ruby project?